// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id         String @id @default(uuid())
  user_id    String @unique
  expires_in Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar()
  description String  @db.VarChar()
  active      Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users User[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar()
  description String  @db.VarChar()
  slug        String  @unique
  active      Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post[]
}

model Tag {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar()
  description String  @db.VarChar()
  active      Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post_Tag[]
}

model Favorite {
  id      String  @id @default(uuid())
  user_id String
  post_id String
  active  Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}

model Comment {
  id      String  @id @default(uuid())
  user_id String
  post_id String
  title   String  @db.VarChar()
  content String  @db.VarChar()
  active  Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  active   Boolean @default(true)
  role_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role @relation(fields: [role_id], references: [id])

  favorites     Favorite[]
  coments       Comment[]
  posts         Post[]
  refresh_token RefreshToken?
}

model Post {
  id          String  @id @default(uuid())
  title       String
  subtitle    String?
  content     String
  poster      String
  slug        String
  active      Boolean @default(true)
  user_id     String
  category_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Favorite Favorite[]
  Comment  Comment[]
  tags     Post_Tag[]

  created_by User     @relation(fields: [user_id], references: [id])
  category   Category @relation(fields: [category_id], references: [id])
}

model Post_Tag {
  id      String  @id @default(uuid())
  post_id String
  tag_id  String
  active  Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts Post @relation(fields: [post_id], references: [id])
  tag   Tag  @relation(fields: [tag_id], references: [id])
}
